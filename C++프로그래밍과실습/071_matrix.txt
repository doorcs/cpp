목적


클래스의 operator overloading 을 연습해 봅니다.




문제

주어진 테스트 케이스가 정상적으로 동작하도록  행렬 타입의 matrix 클래스를 구현하시오.



<참고>

// MatrixTest.cpp

#include "Matrix.h"

using namespace std;

void print_matrix(string name, matrix m){
    cout << name << endl;
    cout << m << endl;
}

int main(){
    matrix m1 = {{4, 1}, {-7, -3}} ;
    matrix m2 = {{1, 1}, {0, 0}} ;

    matrix m3 (m1 + m2);
    matrix m4 = m3;

    print_matrix("m3", m3);
    print_matrix("m4", m4);
    print_matrix("m4.inverse", m4.inverse());

    matrix m5 = {{}};
    print_matrix("m5", m5);
    print_matrix("m5.inverse", m5.inverse());

    matrix m6(m5);
    print_matrix("m6", m6);
    print_matrix("m6.inverse", m6.inverse());

    matrix m7 = m4.inverse();
    m7 = m7 + matrix( {{0, 0}, {8, 6}});

    print_matrix("m4", m4);
    print_matrix("m4.inverse", m4.inverse());

    print_matrix("m7", m7);
    print_matrix("m7.inverse", m7.inverse());
}

// Matrix.h

class Matrix {
public:
    // 생성자, 복사생성자
    // 연산자 오버로딩
    // 멤버 함수들
private:
    int* data = nullptr;
    size_t row = 0;
    size_t col = 0;
};



입력

없음





출력


m3

| 5 2 |

| -7 -3 |



m4

| 5 2 |

| -7 -3 |



m4.inverse

| 3  2 |

| -7 -5 |



m5

| |



m5.inverse

| |



m6

| |



m6.inverse

| |



m4

| 5 2 |

| -7 -3 |



m4.inverse

| 3  2 |

| -7 -5 |



m7

| 3   2 |

| 1   1 |



m7.inverse

| 1  -2 |

| -1   3 |

